// <auto-generated />
using System;
using GameStore.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameStore.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameStore.Domain.Entities.Acquisto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("CodiceSconto")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DataAcquisto")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataCancellazione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaModifica")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GiocoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCancellato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MetodoPagamento")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PrezzoPagato")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UtenteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DataAcquisto")
                        .HasDatabaseName("IX_Acquisti_DataAcquisto");

                    b.HasIndex("GiocoId")
                        .HasDatabaseName("IX_Acquisti_GiocoId");

                    b.HasIndex("UtenteId")
                        .HasDatabaseName("IX_Acquisti_UtenteId");

                    b.HasIndex("UtenteId", "GiocoId")
                        .HasDatabaseName("IX_Acquisti_UtenteId_GiocoId");

                    b.ToTable("Acquisti", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Gioco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime?>("DataCancellazione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataRilascio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaModifica")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genere")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsCancellato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Piattaforma")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PrezzoListino")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sviluppatore")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Titolo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("DataRilascio")
                        .HasDatabaseName("IX_Giochi_DataRilascio");

                    b.HasIndex("Genere")
                        .HasDatabaseName("IX_Giochi_Genere");

                    b.HasIndex("Piattaforma")
                        .HasDatabaseName("IX_Giochi_Piattaforma");

                    b.HasIndex("PrezzoListino")
                        .HasDatabaseName("IX_Giochi_PrezzoListino");

                    b.HasIndex("Titolo")
                        .HasDatabaseName("IX_Giochi_Titolo");

                    b.ToTable("Giochi", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Recensione", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("AcquistoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Corpo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DataCancellazione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataRecensione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaModifica")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GiocoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCancellato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRecensioneVerificata")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Punteggio")
                        .HasColumnType("int");

                    b.Property<string>("Titolo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UtenteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AcquistoId");

                    b.HasIndex("DataRecensione")
                        .HasDatabaseName("IX_Recensioni_DataRecensione");

                    b.HasIndex("GiocoId")
                        .HasDatabaseName("IX_Recensioni_GiocoId");

                    b.HasIndex("IsRecensioneVerificata")
                        .HasDatabaseName("IX_Recensioni_IsRecensioneVerificata");

                    b.HasIndex("Punteggio")
                        .HasDatabaseName("IX_Recensioni_Punteggio");

                    b.HasIndex("UtenteId")
                        .HasDatabaseName("IX_Recensioni_UtenteId");

                    b.HasIndex("UtenteId", "GiocoId")
                        .IsUnique()
                        .HasDatabaseName("IX_Recensioni_UtenteId_GiocoId_Unique");

                    b.ToTable("Recensioni", null, t =>
                        {
                            t.HasCheckConstraint("CK_Recensioni_Punteggio", "Punteggio BETWEEN 1 AND 5");
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Utente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime?>("DataCancellazione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataRegistrazione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaModifica")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<bool>("IsCancellato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Paese")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DataRegistrazione")
                        .HasDatabaseName("IX_Utenti_DataRegistrazione");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Utenti_Email_Unique");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Utenti_Username_Unique");

                    b.ToTable("Utenti", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Acquisto", b =>
                {
                    b.HasOne("GameStore.Domain.Entities.Gioco", "Gioco")
                        .WithMany("Acquisti")
                        .HasForeignKey("GiocoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Entities.Utente", "Utente")
                        .WithMany("Acquisti")
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gioco");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Recensione", b =>
                {
                    b.HasOne("GameStore.Domain.Entities.Acquisto", "Acquisto")
                        .WithMany("Recensioni")
                        .HasForeignKey("AcquistoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GameStore.Domain.Entities.Gioco", "Gioco")
                        .WithMany("Recensioni")
                        .HasForeignKey("GiocoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Entities.Utente", "Utente")
                        .WithMany("Recensioni")
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Acquisto");

                    b.Navigation("Gioco");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Acquisto", b =>
                {
                    b.Navigation("Recensioni");
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Gioco", b =>
                {
                    b.Navigation("Acquisti");

                    b.Navigation("Recensioni");
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Utente", b =>
                {
                    b.Navigation("Acquisti");

                    b.Navigation("Recensioni");
                });
#pragma warning restore 612, 618
        }
    }
}
