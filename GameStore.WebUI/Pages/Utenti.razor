@page "/utenti"
@using GameStore.Application.DTOs
@using GameStore.Application.Services
@using GameStore.Domain.DTOs.Common
@using GameStore.Application.Common
@inject IUtenteService UtenteService
@inject NavigationManager Navigation
@inject DialogService DialogService
@inject NotificationService NotificationService

<PageTitle>Gestione Utenti</PageTitle>

<div class="row mb-3">
    <div class="col">
        <h3>Gestione Utenti</h3>
    </div>
    <div class="col-auto">
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add" Text="Aggiungi Utente" Click="AggiungiUtente" />
    </div>
</div>

@if (errorMessage != null)
{
    <RadzenAlert AlertStyle="AlertStyle.Danger" Text="@errorMessage" />
}


<RadzenDataGrid @ref="grid" 
                Data="@utenti" 
                TItem="UtenteDto"
                AllowPaging="true" 
                AllowSorting="true"
                AllowFiltering="true"
                FilterMode="FilterMode.Advanced"
                PageSize="20"
                Count="@totalCount"
                PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true"
                PagingSummaryFormat="Pagina {0} di {1} ({2} elementi)"
                Loading="@isLoading"
                LoadData="@LoadData">
    
    <Columns>
        <RadzenDataGridColumn TItem="UtenteDto" Property="Username" Title="Username" Width="150px">
            <Template Context="utente">
                <RadzenLabel Text="@utente.Username" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="UtenteDto" Property="Email" Title="Email" Width="200px">
            <Template Context="utente">
                <RadzenLabel Text="@utente.Email" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="UtenteDto" Property="NomeCompleto" Title="Nome Completo" Width="200px">
            <Template Context="utente">
                <RadzenLabel Text="@utente.NomeCompleto" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="UtenteDto" Property="Paese" Title="Paese" Width="120px">
            <Template Context="utente">
                <RadzenLabel Text="@utente.Paese" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="UtenteDto" Property="DataRegistrazione" Title="Data Registrazione" Width="150px">
            <Template Context="utente">
                <RadzenLabel Text="@utente.DataRegistrazione.ToString("dd/MM/yyyy")" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="UtenteDto" Filterable="false" Sortable="false" Width="120px">
            <Template Context="utente">
                <RadzenButton ButtonStyle="ButtonStyle.Light" 
                             Icon="edit" 
                             Size="ButtonSize.Small" 
                             Click="@(() => ModificaUtente(utente.Id))" 
                             class="me-1" />
                <RadzenButton ButtonStyle="ButtonStyle.Danger" 
                             Icon="delete" 
                             Size="ButtonSize.Small" 
                             Click="@(() => CancellaUtente(utente.Id))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private RadzenDataGrid<UtenteDto>? grid;
    private IEnumerable<UtenteDto> utenti = new List<UtenteDto>();
    private bool isLoading = false;
    private string? errorMessage;
    private int totalCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var request = new FilterRequest
            {
                PageNumber = 1,
                PageSize = 20,
                OrderBy = "DataCreazione desc"
            };

            var result = await UtenteService.GetPagedAsync(request);
            result.Match(
                onSuccess: (data) =>
                {
                    utenti = data.Items;
                    totalCount = data.TotalItems;
                    errorMessage = null;
                    Console.WriteLine($"Loaded {utenti.Count()} users, total: {totalCount}");
                },
                onError: (error) =>
                {
                    errorMessage = error.Message;
                    utenti = new List<UtenteDto>();
                    totalCount = 0;
                    Console.WriteLine($"Error loading users: {error.Message}");
                }
            );
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore durante il caricamento: {ex.Message}";
            utenti = new List<UtenteDto>();
            totalCount = 0;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadData(LoadDataArgs args)
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var request = new FilterRequest
            {
                PageNumber = ((args.Skip ?? 0) / (args.Top ?? 20)) + 1,
                PageSize = args.Top ?? 20,
                OrderBy = "DataCreazione desc"
            };

            var result = await UtenteService.GetPagedAsync(request);
            result.Match(
                onSuccess: (data) =>
                {
                    utenti = data.Items;
                    totalCount = data.TotalItems;
                    errorMessage = null;
                    Console.WriteLine($"Loaded {utenti.Count()} users, total: {totalCount}");
                },
                onError: (error) =>
                {
                    errorMessage = error.Message;
                    utenti = new List<UtenteDto>();
                    totalCount = 0;
                    Console.WriteLine($"Error loading users: {error.Message}");
                }
            );
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore durante il caricamento: {ex.Message}";
            utenti = new List<UtenteDto>();
            totalCount = 0;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void AggiungiUtente()
    {
        Navigation.NavigateTo("/utenti/nuovo");
    }

    private void ModificaUtente(Guid id)
    {
        Navigation.NavigateTo($"/utenti/modifica/{id}");
    }

    private async Task CancellaUtente(Guid id)
    {
        try
        {
            // Mostra dialog di conferma con Radzen Dialog
            var result = await DialogService.Confirm(
                "Sei sicuro di voler cancellare questo utente? Questa azione non può essere annullata.",
                "Conferma Cancellazione",
                new ConfirmOptions() 
                { 
                    OkButtonText = "Sì, cancella", 
                    CancelButtonText = "Annulla",
                    Style = "min-width: 400px"
                }
            );
            
            if (result == true)
            {
                var deleteResult = await UtenteService.DeleteAsync(id);

                if (deleteResult.IsSuccess)
                {
                    // Ricarica prima la griglia
                    await LoadInitialData();
                    
                    // Poi mostra la notifica di successo
                    NotificationService.Notify(new NotificationMessage 
                    { 
                        Severity = NotificationSeverity.Success, 
                        Summary = "Utente Cancellato",
                        Detail = "L'utente è stato cancellato con successo.",
                        Duration = 2000,
                        ShowProgress = true
                    });
                }
                else
                {
                    // Mostra notifica di errore
                    NotificationService.Notify(new NotificationMessage 
                    { 
                        Severity = NotificationSeverity.Error, 
                        Summary = "Errore",
                        Detail = deleteResult.Error.Message,
                        Duration = 6000,
                        ShowProgress = true
                    });
                }
            }
        }
        catch (Exception ex)
        {
            // Mostra notifica di errore
            NotificationService.Notify(new NotificationMessage 
            { 
                Severity = NotificationSeverity.Error, 
                Summary = "Errore",
                Detail = $"Errore durante la cancellazione: {ex.Message}",
                Duration = 6000,
                ShowProgress = true
            });
        }
    }


}
