@page "/utenti/modifica/{Id:guid}"
@using GameStore.Application.DTOs
@using GameStore.Application.Services
@using GameStore.Application.Common
@inject IUtenteService UtenteService
@inject NavigationManager Navigation

<PageTitle>Modifica Utente</PageTitle>

<h3>Modifica Utente</h3>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Caricamento...</span>
        </div>
    </div>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else if (utente != null)
{
    <EditForm Model="utente" OnValidSubmit="SalvaUtente">
        <DataAnnotationsValidator />
        
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" @bind-Value="utente.Username" class="form-control" />
                    <ValidationMessage For="@(() => utente.Username)" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <InputText id="email" @bind-Value="utente.Email" class="form-control" />
                    <ValidationMessage For="@(() => utente.Email)" />
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="nomeCompleto" class="form-label">Nome Completo</label>
                    <InputText id="nomeCompleto" @bind-Value="utente.NomeCompleto" class="form-control" />
                    <ValidationMessage For="@(() => utente.NomeCompleto)" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="paese" class="form-label">Paese</label>
                    <InputText id="paese" @bind-Value="utente.Paese" class="form-control" />
                    <ValidationMessage For="@(() => utente.Paese)" />
                </div>
            </div>
        </div>

        @if (saveErrorMessage != null)
        {
            <div class="alert alert-danger" role="alert">
                @saveErrorMessage
            </div>
        }

        <div class="mb-3">
            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                }
                Salva
            </button>
            <a href="/utenti" class="btn btn-secondary ms-2">Annulla</a>
        </div>
    </EditForm>
}

@code {
    [Parameter] public Guid Id { get; set; }

    private AggiornaUtenteDto? utente;
    private bool isLoading = true;
    private bool isSaving = false;
    private string? errorMessage;
    private string? saveErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        await CaricaUtente();
    }

    private async Task CaricaUtente()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var result = await UtenteService.GetByIdAsync(Id);
            if (result.IsSuccess)
            {
                utente = new AggiornaUtenteDto
                {
                    Id = result.Value.Id,
                    Username = result.Value.Username,
                    Email = result.Value.Email,
                    NomeCompleto = result.Value.NomeCompleto,
                    Paese = result.Value.Paese
                };
            }
            else
            {
                errorMessage = result.Error.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore durante il caricamento: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SalvaUtente()
    {
        try
        {
            isSaving = true;
            saveErrorMessage = null;

            if (utente != null)
            {
                var result = await UtenteService.UpdateAsync(utente);
                if (result.IsSuccess)
                {
                    Navigation.NavigateTo("/utenti");
                }
                else
                {
                    saveErrorMessage = result.Error.Message;
                }
            }
        }
        catch (Exception ex)
        {
            saveErrorMessage = $"Errore durante il salvataggio: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }
}
