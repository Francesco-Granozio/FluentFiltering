@page "/recensioni"
@using GameStore.Application.DTOs
@using GameStore.Application.Services
@using GameStore.Domain.DTOs.Common
@using GameStore.Application.Common
@inject IRecensioneService RecensioneService
@inject NavigationManager Navigation
@inject DialogService DialogService
@inject NotificationService NotificationService

<PageTitle>Gestione Recensioni</PageTitle>

<div class="row mb-3">
    <div class="col">
        <h3>Gestione Recensioni</h3>
    </div>
    <div class="col-auto">
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add" Text="Nuova Recensione" Click="AggiungiRecensione" />
    </div>
</div>

@if (errorMessage != null)
{
    <RadzenAlert AlertStyle="AlertStyle.Danger" Text="@errorMessage" />
}

<RadzenDataGrid @ref="grid" 
                Data="@recensioni" 
                TItem="RecensioneDto"
                AllowPaging="true" 
                AllowSorting="true"
                AllowFiltering="true"
                FilterMode="FilterMode.Advanced"
                PageSize="20"
                Count="@totalCount"
                PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true"
                PagingSummaryFormat="Pagina {0} di {1} ({2} elementi)"
                Loading="@isLoading"
                LoadData="@LoadData">
    
    <Columns>
        <RadzenDataGridColumn TItem="RecensioneDto" Property="UtenteUsername" Title="Utente" Width="150px">
            <Template Context="recensione">
                <RadzenLabel Text="@recensione.UtenteUsername" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="RecensioneDto" Property="GiocoTitolo" Title="Gioco" Width="200px">
            <Template Context="recensione">
                <RadzenLabel Text="@recensione.GiocoTitolo" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="RecensioneDto" Property="Punteggio" Title="Punteggio" Width="100px">
            <Template Context="recensione">
                <RadzenBadge Text="@recensione.Punteggio.ToString()" 
                           BadgeStyle="@GetPunteggioStyle(recensione.Punteggio)" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="RecensioneDto" Property="Titolo" Title="Titolo" Width="200px">
            <Template Context="recensione">
                <RadzenLabel Text="@recensione.Titolo" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="RecensioneDto" Property="Corpo" Title="Recensione" Width="300px">
            <Template Context="recensione">
                <RadzenLabel Text="@(recensione.Corpo?.Length > 50 ? recensione.Corpo.Substring(0, 50) + "..." : recensione.Corpo)" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="RecensioneDto" Property="DataRecensione" Title="Data Recensione" Width="120px">
            <Template Context="recensione">
                <RadzenLabel Text="@recensione.DataRecensione.ToString("dd/MM/yyyy")" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="RecensioneDto" Property="IsRecensioneVerificata" Title="Verificata" Width="100px">
            <Template Context="recensione">
                <RadzenCheckBox @bind-Value="@recensione.IsRecensioneVerificata" 
                               Disabled="true" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="RecensioneDto" Filterable="false" Sortable="false" Width="120px">
            <Template Context="recensione">
                <RadzenButton ButtonStyle="ButtonStyle.Light" 
                             Icon="edit" 
                             Size="ButtonSize.Small" 
                             Click="@(() => ModificaRecensione(recensione.Id))" 
                             class="me-1" />
                <RadzenButton ButtonStyle="ButtonStyle.Danger" 
                             Icon="delete" 
                             Size="ButtonSize.Small" 
                             Click="@(() => CancellaRecensione(recensione.Id))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private RadzenDataGrid<RecensioneDto>? grid;
    private IEnumerable<RecensioneDto> recensioni = new List<RecensioneDto>();
    private bool isLoading = false;
    private string? errorMessage;
    private int totalCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var request = new FilterRequest
            {
                PageNumber = 1,
                PageSize = 20,
                OrderBy = "DataCreazione desc"
            };

            var result = await RecensioneService.GetPagedAsync(request);
            if (result.IsSuccess)
            {
                recensioni = result.Value.Items;
                totalCount = result.Value.TotalItems;
                Console.WriteLine($"Loaded {recensioni.Count()} reviews, total: {totalCount}");
            }
            else
            {
                errorMessage = result.Error.Message;
                recensioni = new List<RecensioneDto>();
                totalCount = 0;
                Console.WriteLine($"Error loading reviews: {result.Error.Message}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore durante il caricamento: {ex.Message}";
            recensioni = new List<RecensioneDto>();
            totalCount = 0;
        }
        finally
        {
            isLoading = false;
        }
    }

    private BadgeStyle GetPunteggioStyle(int punteggio)
    {
        return punteggio switch
        {
            5 => BadgeStyle.Success,
            4 => BadgeStyle.Primary,
            3 => BadgeStyle.Info,
            2 => BadgeStyle.Warning,
            1 => BadgeStyle.Danger,
            _ => BadgeStyle.Light
        };
    }

    private async Task LoadData(LoadDataArgs args)
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var request = new FilterRequest
            {
                PageNumber = ((args.Skip ?? 0) / (args.Top ?? 20)) + 1,
                PageSize = args.Top ?? 20,
                OrderBy = "DataCreazione desc"
            };

            var result = await RecensioneService.GetPagedAsync(request);
            if (result.IsSuccess)
            {
                recensioni = result.Value.Items;
                totalCount = result.Value.TotalItems;
            }
            else
            {
                errorMessage = result.Error.Message;
                recensioni = new List<RecensioneDto>();
                totalCount = 0;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore durante il caricamento: {ex.Message}";
            recensioni = new List<RecensioneDto>();
            totalCount = 0;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void AggiungiRecensione()
    {
        Navigation.NavigateTo("/recensioni/nuovo");
    }

    private void ModificaRecensione(Guid id)
    {
        Navigation.NavigateTo($"/recensioni/modifica/{id}");
    }

    private async Task CancellaRecensione(Guid id)
    {
        try
        {
            // Mostra dialog di conferma con Radzen Dialog
            var result = await DialogService.Confirm(
                "Sei sicuro di voler cancellare questa recensione? Questa azione non può essere annullata.",
                "Conferma Cancellazione",
                new ConfirmOptions() 
                { 
                    OkButtonText = "Sì, cancella", 
                    CancelButtonText = "Annulla",
                    Style = "min-width: 400px"
                }
            );

            if (result == true)
            {
                var deleteResult = await RecensioneService.DeleteAsync(id);

                if (deleteResult.IsSuccess)
                {
                    // Mostra notifica di successo
                    NotificationService.Notify(new NotificationMessage 
                    { 
                        Severity = NotificationSeverity.Success, 
                        Summary = "Recensione Cancellata",
                        Detail = "La recensione è stata cancellata con successo.",
                        Duration = 4000,
                        ShowProgress = true
                    });
                    
                    // Ricarica la griglia
                    await LoadInitialData();
                }
                else
                {
                    // Mostra notifica di errore
                    NotificationService.Notify(new NotificationMessage 
                    { 
                        Severity = NotificationSeverity.Error, 
                        Summary = "Errore",
                        Detail = deleteResult.Error.Message,
                        Duration = 6000,
                        ShowProgress = true
                    });
                }
            }
        }
        catch (Exception ex)
        {
            // Mostra notifica di errore
            NotificationService.Notify(new NotificationMessage 
            { 
                Severity = NotificationSeverity.Error, 
                Summary = "Errore",
                Detail = $"Errore durante la cancellazione: {ex.Message}",
                Duration = 6000,
                ShowProgress = true
            });
        }
    }

}