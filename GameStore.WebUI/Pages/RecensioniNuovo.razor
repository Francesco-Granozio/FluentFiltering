@page "/recensioni/nuovo"
@using GameStore.Application.DTOs
@using GameStore.Application.Services
@using GameStore.Application.Common
@using GameStore.Domain.DTOs.Common
@inject IRecensioneService RecensioneService
@inject IUtenteService UtenteService
@inject IGiocoService GiocoService
@inject IAcquistoService AcquistoService
@inject NavigationManager Navigation

<PageTitle>Nuova Recensione</PageTitle>

<h3>Nuova Recensione</h3>

@if (isLoadingData)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Caricamento...</span>
        </div>
    </div>
}
else
{
    <EditForm Model="recensione" OnValidSubmit="SalvaRecensione">
        <DataAnnotationsValidator />
        
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="utenteId" class="form-label">Utente</label>
                    <InputSelect id="utenteId" @bind-Value="recensione.UtenteId" class="form-select">
                        <option value="">Seleziona un utente</option>
                        @foreach (var utente in utenti)
                        {
                            <option value="@utente.Id">@utente.Username - @utente.NomeCompleto</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => recensione.UtenteId)" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="giocoId" class="form-label">Gioco</label>
                    <InputSelect id="giocoId" @bind-Value="recensione.GiocoId" class="form-select">
                        <option value="">Seleziona un gioco</option>
                        @foreach (var gioco in giochi)
                        {
                            <option value="@gioco.Id">@gioco.Titolo</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => recensione.GiocoId)" />
                </div>
            </div>
        </div>

        <div class="mb-3">
            <label for="acquistoId" class="form-label">Acquisto (opzionale)</label>
            <InputSelect id="acquistoId" @bind-Value="recensione.AcquistoId" class="form-select">
                <option value="">Nessun acquisto specifico</option>
                @foreach (var acquisto in acquisti)
                {
                    <option value="@acquisto.Id">@acquisto.UtenteUsername - @acquisto.GiocoTitolo - @acquisto.DataAcquisto.ToString("dd/MM/yyyy")</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => recensione.AcquistoId)" />
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="punteggio" class="form-label">Punteggio</label>
                    <InputSelect id="punteggio" @bind-Value="recensione.Punteggio" class="form-select">
                        <option value="0">Seleziona punteggio</option>
                        <option value="1">1 stella</option>
                        <option value="2">2 stelle</option>
                        <option value="3">3 stelle</option>
                        <option value="4">4 stelle</option>
                        <option value="5">5 stelle</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => recensione.Punteggio)" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="dataRecensione" class="form-label">Data Recensione</label>
                    <InputDate id="dataRecensione" @bind-Value="recensione.DataRecensione" class="form-control" />
                    <ValidationMessage For="@(() => recensione.DataRecensione)" />
                </div>
            </div>
        </div>

        <div class="mb-3">
            <label for="titolo" class="form-label">Titolo</label>
            <InputText id="titolo" @bind-Value="recensione.Titolo" class="form-control" />
            <ValidationMessage For="@(() => recensione.Titolo)" />
        </div>

        <div class="mb-3">
            <label for="corpo" class="form-label">Recensione</label>
            <InputTextArea id="corpo" @bind-Value="recensione.Corpo" class="form-control" rows="5" />
            <ValidationMessage For="@(() => recensione.Corpo)" />
        </div>

        <div class="mb-3">
            <div class="form-check">
                <InputCheckbox id="isRecensioneVerificata" @bind-Value="recensione.IsRecensioneVerificata" class="form-check-input" />
                <label class="form-check-label" for="isRecensioneVerificata">
                    Recensione verificata
                </label>
            </div>
        </div>

        @if (errorMessage != null)
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }

        <div class="mb-3">
            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                }
                Salva
            </button>
            <a href="/recensioni" class="btn btn-secondary ms-2">Annulla</a>
        </div>
    </EditForm>
}

@code {
    private CreaRecensioneDto recensione = new();
    private List<UtenteDto> utenti = new();
    private List<GiocoDto> giochi = new();
    private List<AcquistoDto> acquisti = new();
    private bool isSaving = false;
    private bool isLoadingData = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await CaricaDati();
    }

    private async Task CaricaDati()
    {
        try
        {
            isLoadingData = true;

            // Carica utenti
            var utentiRequest = new FilterRequest { PageSize = 1000 };
            var utentiResult = await UtenteService.GetPagedAsync(utentiRequest);
            if (utentiResult.IsSuccess)
            {
                utenti = utentiResult.Value.Items.ToList();
            }

            // Carica giochi
            var giochiRequest = new FilterRequest { PageSize = 1000 };
            var giochiResult = await GiocoService.GetPagedAsync(giochiRequest);
            if (giochiResult.IsSuccess)
            {
                giochi = giochiResult.Value.Items.ToList();
            }

            // Carica acquisti
            var acquistiRequest = new FilterRequest { PageSize = 1000 };
            var acquistiResult = await AcquistoService.GetPagedAsync(acquistiRequest);
            if (acquistiResult.IsSuccess)
            {
                acquisti = acquistiResult.Value.Items.ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore durante il caricamento dei dati: {ex.Message}";
        }
        finally
        {
            isLoadingData = false;
        }
    }

    private async Task SalvaRecensione()
    {
        try
        {
            isSaving = true;
            errorMessage = null;

            var result = await RecensioneService.CreateAsync(recensione);
            if (result.IsSuccess)
            {
                Navigation.NavigateTo("/recensioni");
            }
            else
            {
                errorMessage = result.Error.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore durante il salvataggio: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }
}
