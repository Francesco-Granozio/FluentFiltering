@page "/giochi-acquistati"
@using GameStore.Application.Services
@using GameStore.Shared.DTOs
@using GameStore.Shared.DTOs.Common
@using GameStore.Shared.Filters
@using GameStore.Shared.Common
@inject IGiochiAcquistatiService GiochiAcquistatiService
@inject IChatService ChatService
@inject IJSRuntime JSRuntime

<PageTitle>Giochi Acquistati - GameStore AI</PageTitle>

<div class="container-fluid">
    <!-- Header Card -->
    <div class="apple-card compact-header">
        <div class="d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
                <i class="fas fa-shopping-cart me-3 text-primary" style="font-size: 1.5rem;"></i>
                <div>
                    <h4 class="mb-0">Giochi Acquistati</h4>
                    <p class="text-muted mb-0">Visualizza tutti i giochi acquistati dagli utenti</p>
                </div>
            </div>
            <div class="d-flex gap-2">
                <RadzenButton ButtonStyle="ButtonStyle.Primary" 
                              Icon="refresh" 
                              Text="Aggiorna" 
                              Click="CaricaDati" 
                              class="apple-btn-primary" />
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" 
                              Icon="filter_alt_off" 
                              Text="Pulisci Filtri" 
                              Click="ClearFilters" 
                              class="apple-btn-secondary" />
                <RadzenButton ButtonStyle="ButtonStyle.Info" 
                              Icon="@(isChatOpen ? "close" : "chat")" 
                              Text="@(isChatOpen ? "Chiudi Chat" : "Apri Chat")" 
                              Click="ToggleChat" 
                              class="apple-btn-info" />
            </div>
        </div>
    </div>

    <!-- Error Message -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <RadzenAlert AlertStyle="AlertStyle.Danger" 
                     Text="@errorMessage" 
                     class="mt-3" />
    }

    <!-- Main Content with Chat Sidebar -->
    <div class="main-content-with-chat @(isChatOpen ? "chat-open" : "")">
        <!-- Data Grid -->
        <div class="data-grid-container">
            <DynamicGridComponent @ref="dynamicGrid">
            <RadzenDataGrid @ref="grid" 
                            Data="@giochiAcquistati" 
                            TItem="GiochiAcquistatiDto"
                            AllowPaging="true" 
                            AllowSorting="true"
                            AllowFiltering="true"
                            AllowFilteringByColumn="true"
                            AllowGrouping="true"
                            FilterMode="FilterMode.Advanced"
                            PageSize="20"
                            PagerHorizontalAlign="HorizontalAlign.Left"
                            ShowPagingSummary="true"
                            PagingSummaryFormat="Pagina {0} di {1} ({2} elementi)"
                            Loading="@isLoading">

                <Columns>
                    <RadzenDataGridColumn @ref="colUtenteUsername" TItem="GiochiAcquistatiDto" Property="UtenteUsername" Title="Username" Width="120px" />
                    <RadzenDataGridColumn @ref="colUtenteEmail" TItem="GiochiAcquistatiDto" Property="UtenteEmail" Title="Email" Width="180px" />
                    <RadzenDataGridColumn @ref="colUtenteNomeCompleto" TItem="GiochiAcquistatiDto" Property="UtenteNomeCompleto" Title="Nome Completo" Width="150px" />
                    <RadzenDataGridColumn @ref="colDataAcquisto" TItem="GiochiAcquistatiDto" Property="DataAcquisto" Title="Data Acquisto" Width="120px">
                        <Template>
                            @context.DataAcquisto.ToString("dd/MM/yyyy")
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn @ref="colPrezzoPagato" TItem="GiochiAcquistatiDto" Property="PrezzoPagato" Title="Prezzo Pagato" Width="120px">
                        <Template>
                            @context.PrezzoPagato.ToString("C2")
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn @ref="colQuantita" TItem="GiochiAcquistatiDto" Property="Quantita" Title="Quantità" Width="80px" />
                    <RadzenDataGridColumn @ref="colMetodoPagamento" TItem="GiochiAcquistatiDto" Property="MetodoPagamento" Title="Metodo Pagamento" Width="130px" />
                    <RadzenDataGridColumn @ref="colCodiceSconto" TItem="GiochiAcquistatiDto" Property="CodiceSconto" Title="Codice Sconto" Width="120px">
                        <Template>
                            @(string.IsNullOrEmpty(context.CodiceSconto) ? "Nessuno" : context.CodiceSconto)
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn @ref="colGiocoTitolo" TItem="GiochiAcquistatiDto" Property="GiocoTitolo" Title="Titolo Gioco" Width="180px" />
                    <RadzenDataGridColumn @ref="colGiocoDescrizione" TItem="GiochiAcquistatiDto" Property="GiocoDescrizione" Title="Descrizione" Width="250px">
                        <Template>
                            @(context.GiocoDescrizione?.Length > 50 ? context.GiocoDescrizione.Substring(0, 50) + "..." : context.GiocoDescrizione)
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn @ref="colGiocoPrezzoListino" TItem="GiochiAcquistatiDto" Property="GiocoPrezzoListino" Title="Prezzo Listino" Width="120px">
                        <Template>
                            @context.GiocoPrezzoListino.ToString("C2")
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn @ref="colGiocoDataRilascio" TItem="GiochiAcquistatiDto" Property="GiocoDataRilascio" Title="Data Rilascio" Width="120px">
                        <Template>
                            @(context.GiocoDataRilascio?.ToString("dd/MM/yyyy") ?? "N/A")
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn @ref="colGiocoGenere" TItem="GiochiAcquistatiDto" Property="GiocoGenere" Title="Genere" Width="120px" />
                    <RadzenDataGridColumn @ref="colGiocoPiattaforma" TItem="GiochiAcquistatiDto" Property="GiocoPiattaforma" Title="Piattaforma" Width="120px" />
                    <RadzenDataGridColumn @ref="colGiocoSviluppatore" TItem="GiochiAcquistatiDto" Property="GiocoSviluppatore" Title="Sviluppatore" Width="150px" />
                </Columns>
            </RadzenDataGrid>
            </DynamicGridComponent>
        </div>

        <!-- Chat Sidebar -->
        <div class="chat-sidebar @(isChatOpen ? "chat-open" : "") @(isAwaitingResponse ? "awaiting-response" : "")">
            <div class="chat-header">
                <div class="d-flex align-items-center">
                    <i class="fas @(isAwaitingResponse ? "fa-spinner fa-spin" : "fa-robot") me-2 @(isAiServiceAvailable ? "text-primary" : "text-secondary")"></i>
                    <h6 class="mb-0">
                        GameStore AI Assistant
                        @if (isAwaitingResponse)
                        {
                            <span class="badge bg-primary ms-2">Pensando...</span>
                        }
                        else if (!isAiServiceAvailable)
                        {
                            <span class="badge bg-secondary ms-2">Offline</span>
                        }
                        else
                        {
                            <span class="badge bg-success ms-2">Online</span>
                        }
                    </h6>
                </div>
                <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleChat">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="chat-messages" @ref="chatMessagesContainer">
                <div class="message assistant-message">
                    <div class="message-avatar">
                        <i class="fas fa-robot"></i>
                    </div>
                    <div class="message-content">
                        <p>
                            @if (isAiServiceAvailable)
                            {
                                <text>Ciao! Sono l'assistente AI di GameStore. Come posso aiutarti ad analizzare i dati dei giochi acquistati?</text>
                            }
                            else
                            {
                                <text>Ciao! Sono l'assistente AI di GameStore, ma al momento il servizio Ollama non è disponibile. Assicurati che Ollama sia in esecuzione con il modello gpt-oss:20b.</text>
                            }
                        </p>
                    </div>
                </div>
                
                @foreach (var message in chatMessages)
                {
                    <div class="message @(message.IsUser ? "user-message" : "assistant-message")">
                        <div class="message-avatar">
                            <i class="fas @(message.IsUser ? "fa-user" : "fa-robot")"></i>
                        </div>
                        <div class="message-content">
                            <p>@message.Content</p>
                            <small class="message-time">@message.Timestamp.ToString("HH:mm")</small>
                        </div>
                    </div>
                }
            </div>
            
            <div class="chat-input">
                <div class="input-group">
                    <input type="text" 
                           class="form-control" 
                           placeholder="Chiedi qualcosa sui dati..."
                           @bind="currentMessage"
                           @onkeypress="HandleKeyPress"
                           @ref="messageInput" />
                    <button class="btn btn-primary @(isAwaitingResponse ? "awaiting-response" : "")" 
                            @onclick="SendMessage" 
                            disabled="@(string.IsNullOrWhiteSpace(currentMessage) || isAwaitingResponse)">
                        <i class="fas @(isAwaitingResponse ? "fa-spinner fa-spin" : "fa-paper-plane")"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<GiochiAcquistatiDto> giochiAcquistati = new List<GiochiAcquistatiDto>();
    private bool isLoading = false;
    private string? errorMessage;
    private RadzenDataGrid<GiochiAcquistatiDto>? grid;
    private DynamicGridComponent? dynamicGrid;
    // Column references
    private RadzenDataGridColumn<GiochiAcquistatiDto>? colUtenteUsername;
    private RadzenDataGridColumn<GiochiAcquistatiDto>? colUtenteEmail;
    private RadzenDataGridColumn<GiochiAcquistatiDto>? colUtenteNomeCompleto;
    private RadzenDataGridColumn<GiochiAcquistatiDto>? colDataAcquisto;
    private RadzenDataGridColumn<GiochiAcquistatiDto>? colPrezzoPagato;
    private RadzenDataGridColumn<GiochiAcquistatiDto>? colQuantita;
    private RadzenDataGridColumn<GiochiAcquistatiDto>? colMetodoPagamento;
    private RadzenDataGridColumn<GiochiAcquistatiDto>? colCodiceSconto;
    private RadzenDataGridColumn<GiochiAcquistatiDto>? colGiocoTitolo;
    private RadzenDataGridColumn<GiochiAcquistatiDto>? colGiocoDescrizione;
    private RadzenDataGridColumn<GiochiAcquistatiDto>? colGiocoPrezzoListino;
    private RadzenDataGridColumn<GiochiAcquistatiDto>? colGiocoDataRilascio;
    private RadzenDataGridColumn<GiochiAcquistatiDto>? colGiocoGenere;
    private RadzenDataGridColumn<GiochiAcquistatiDto>? colGiocoPiattaforma;
    private RadzenDataGridColumn<GiochiAcquistatiDto>? colGiocoSviluppatore;

    // Chat variables
    private bool isChatOpen = false;
    private bool isAwaitingResponse = false;
    private bool isAiServiceAvailable = false;
    private string currentMessage = string.Empty;
    private List<ChatMessage> chatMessages = new List<ChatMessage>();
    private ElementReference messageInput;
    private ElementReference chatMessagesContainer;

    public class ChatMessage
    {
        public string Content { get; set; } = string.Empty;
        public bool IsUser { get; set; }
        public DateTime Timestamp { get; set; } = DateTime.Now;
    }

    protected override async Task OnInitializedAsync()
    {
        await CaricaDati();
        await CheckAiServiceAvailability();
    }

    private async Task CheckAiServiceAvailability()
    {
        try
        {
            isAiServiceAvailable = await ChatService.IsAvailableAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking AI service availability: {ex.Message}");
            isAiServiceAvailable = false;
        }
    }

    private async Task CaricaDati()
    {
        try
        {
            errorMessage = null;
            await LoadInitialData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore durante il caricamento: {ex.Message}";
        }
    }

    private async Task LoadInitialData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            var request = new FilterRequest
            {
                PageNumber = 1,
                PageSize = 10000, // Carica un numero molto alto per ottenere tutti i record
                OrderBy = "DataAcquisto desc"
            };

            var result = await GiochiAcquistatiService.GetPagedAsync(request);
            if (result.IsSuccess)
            {
                giochiAcquistati = result.Value.Items.ToList();
                
                // Gestisce i valori null per il raggruppamento
                foreach (var item in giochiAcquistati)
                {
                    if (string.IsNullOrEmpty(item.MetodoPagamento))
                        item.MetodoPagamento = "Non specificato";
                    if (string.IsNullOrEmpty(item.CodiceSconto))
                        item.CodiceSconto = "Nessuno";
                    if (string.IsNullOrEmpty(item.GiocoGenere))
                        item.GiocoGenere = "Non specificato";
                    if (string.IsNullOrEmpty(item.GiocoPiattaforma))
                        item.GiocoPiattaforma = "Non specificato";
                    if (string.IsNullOrEmpty(item.GiocoSviluppatore))
                        item.GiocoSviluppatore = "Non specificato";
                }
                
                Console.WriteLine($"Loaded {giochiAcquistati.Count()} purchased games for client-side filtering");
            }
            else
            {
                errorMessage = result.Error.Message;
                giochiAcquistati = new List<GiochiAcquistatiDto>();
                Console.WriteLine($"Error loading purchased games: {result.Error.Message}");
            }
        }
        finally
        {
            isLoading = false;
            
            // Refresh the dynamic grid after loading data
            if (dynamicGrid != null)
            {
                await dynamicGrid.RefreshGrid();
            }
        }
    }

    private async Task ClearFilters()
    {
        if (grid != null)
        {
            grid.Reset(false, false);
            ResetAllColumnFilters();
            await LoadInitialData();
        }
        StateHasChanged();
        
        // Refresh the dynamic grid after clearing filters
        if (dynamicGrid != null)
        {
            await dynamicGrid.RefreshGrid();
        }
    }

    // Chat methods
    private void ToggleChat()
    {
        isChatOpen = !isChatOpen;
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage) || isAwaitingResponse)
            return;

        // Add user message
        var userMessage = new ChatMessage
        {
            Content = currentMessage,
            IsUser = true,
            Timestamp = DateTime.Now
        };
        chatMessages.Add(userMessage);

        // Clear input and start awaiting response
        var messageToSend = currentMessage;
        currentMessage = string.Empty;
        isAwaitingResponse = true;
        
        // Scroll to bottom
        await ScrollToBottom();
        StateHasChanged();

        try
        {
            // Send message to AI with game data context
            var aiResponse = await ChatService.SendMessageAsync(messageToSend, giochiAcquistati);
            
            var aiMessage = new ChatMessage
            {
                Content = aiResponse,
                IsUser = false,
                Timestamp = DateTime.Now
            };
            chatMessages.Add(aiMessage);

            // Applica automaticamente i filtri Radzen (JSON) alla grid
            ApplyRadzenFiltersFromAiJson(aiResponse);
        }
        catch (Exception ex)
        {
            // Fallback response if AI service is not available
            var errorMessage = new ChatMessage
            {
                Content = $"Mi dispiace, il servizio AI non è attualmente disponibile. Errore: {ex.Message}",
                IsUser = false,
                Timestamp = DateTime.Now
            };
            chatMessages.Add(errorMessage);
        }

        // Stop awaiting response
        isAwaitingResponse = false;

        await ScrollToBottom();
        StateHasChanged();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollChatToBottom", chatMessagesContainer);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error scrolling chat: {ex.Message}");
        }
    }

    // Applicazione filtri Radzen (array JSON di FilterDescriptor-like)
    private class RadzenFilterDto
    {
        public string Property { get; set; } = string.Empty;
        public string FilterOperator { get; set; } = string.Empty;
        public object? FilterValue { get; set; }
        public object? FilterValue2 { get; set; }
        public string? Logical { get; set; } // And | Or (per combinare due filtri sulla stessa colonna)
    }

    private void ApplyRadzenFiltersFromAiJson(string aiResponse)
    {
        try
        {
            string raw = aiResponse.Trim();
            int start = raw.IndexOf('[');
            int end = raw.LastIndexOf(']');
            if (start < 0 || end < 0 || end < start) return;
            string json = raw.Substring(start, end - start + 1);

            var filters = System.Text.Json.JsonSerializer.Deserialize<List<RadzenFilterDto>>(json, new System.Text.Json.JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
            if (filters == null || filters.Count == 0) return;

            // Pulisci filtri esistenti
            grid.Reset(false, false);

            // Raggruppa per colonna per supportare fino a 2 filtri (Radzen)
            foreach (var group in filters.GroupBy(x => x.Property))
            {
                var col = GetColumnByProperty(group.Key);
                if (col == null) continue;
                var propertyType = GetPropertyType(group.Key);
                var list = group.ToList();

                // Pulisci prima i filtri della colonna
                col.FilterValue = null;
                col.SecondFilterValue = null;
                col.FilterOperator = Radzen.FilterOperator.Contains;
                col.SecondFilterOperator = Radzen.FilterOperator.Contains;
                col.LogicalFilterOperator = Radzen.LogicalFilterOperator.And;

                if (list.Count == 1)
                {
                    var f = list[0];
                    var v1 = ConvertFilterValue(f.FilterValue, propertyType);
                    var v2 = ConvertFilterValue(f.FilterValue2, propertyType);
                    if (string.Equals(f.FilterOperator, "Between", StringComparison.OrdinalIgnoreCase))
                    {
                        col.FilterOperator = Radzen.FilterOperator.GreaterThanOrEquals;
                        col.SecondFilterOperator = Radzen.FilterOperator.LessThanOrEquals;
                        col.FilterValue = v1;
                        col.SecondFilterValue = v2;
                        col.LogicalFilterOperator = Radzen.LogicalFilterOperator.And;
                    }
                    else
                    {
                        col.FilterOperator = ParseOperator(f.FilterOperator);
                        col.FilterValue = v1;
                    }
                }
                else
                {
                    // Usa i primi due filtri per la colonna
                    var f1 = list[0];
                    var f2 = list[1];
                    var v1 = ConvertFilterValue(f1.FilterValue, propertyType);
                    var v2 = ConvertFilterValue(f2.FilterValue, propertyType);
                    col.FilterOperator = ParseOperator(f1.FilterOperator);
                    col.FilterValue = v1;
                    col.SecondFilterOperator = ParseOperator(f2.FilterOperator);
                    col.SecondFilterValue = v2;
                    var logical = (f2.Logical ?? f1.Logical)?.ToLowerInvariant();
                    col.LogicalFilterOperator = logical == "or" ? Radzen.LogicalFilterOperator.Or : Radzen.LogicalFilterOperator.And;
                }
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying Radzen filters: {ex.Message}");
        }
    }

    private static Radzen.FilterOperator ParseOperator(string op)
    {
        return op?.ToLowerInvariant() switch
        {
            "equals" => Radzen.FilterOperator.Equals,
            "notequals" => Radzen.FilterOperator.NotEquals,
            "contains" => Radzen.FilterOperator.Contains,
            "startswith" => Radzen.FilterOperator.StartsWith,
            "endswith" => Radzen.FilterOperator.EndsWith,
            "greaterthan" => Radzen.FilterOperator.GreaterThan,
            "greaterthanorequals" => Radzen.FilterOperator.GreaterThanOrEquals,
            "lessthan" => Radzen.FilterOperator.LessThan,
            "lessthanorequals" => Radzen.FilterOperator.LessThanOrEquals,
            "isnull" => Radzen.FilterOperator.IsNull,
            "isnotnull" => Radzen.FilterOperator.IsNotNull,
            _ => Radzen.FilterOperator.Contains
        };
    }

    private void ResetAllColumnFilters()
    {
        void ResetCol(RadzenDataGridColumn<GiochiAcquistatiDto>? c)
        {
            if (c == null) return;
            c.FilterValue = null;
            c.SecondFilterValue = null;
            c.FilterOperator = Radzen.FilterOperator.Contains;
            c.SecondFilterOperator = Radzen.FilterOperator.Contains;
            c.LogicalFilterOperator = Radzen.LogicalFilterOperator.And;
        }

        ResetCol(colUtenteUsername);
        ResetCol(colUtenteEmail);
        ResetCol(colUtenteNomeCompleto);
        ResetCol(colDataAcquisto);
        ResetCol(colPrezzoPagato);
        ResetCol(colQuantita);
        ResetCol(colMetodoPagamento);
        ResetCol(colCodiceSconto);
        ResetCol(colGiocoTitolo);
        ResetCol(colGiocoDescrizione);
        ResetCol(colGiocoPrezzoListino);
        ResetCol(colGiocoDataRilascio);
        ResetCol(colGiocoGenere);
        ResetCol(colGiocoPiattaforma);
        ResetCol(colGiocoSviluppatore);
    }

    private static Type GetPropertyType(string property)
    {
        return typeof(GiochiAcquistatiDto).GetProperty(property)?.PropertyType ?? typeof(string);
    }

    private static object? ConvertFilterValue(object? value, Type targetType)
    {
        if (value == null) return null;
        try
        {
            Type nonNullable = Nullable.GetUnderlyingType(targetType) ?? targetType;
            if (nonNullable == typeof(string)) return Convert.ToString(value);
            if (nonNullable == typeof(Guid)) return value is Guid g ? g : Guid.Parse(Convert.ToString(value)!);
            if (nonNullable == typeof(int)) return Convert.ToInt32(value);
            if (nonNullable == typeof(decimal)) return Convert.ToDecimal(value, System.Globalization.CultureInfo.InvariantCulture);
            if (nonNullable == typeof(DateTime)) return Convert.ToDateTime(value, System.Globalization.CultureInfo.InvariantCulture);
            if (nonNullable == typeof(bool)) return Convert.ToBoolean(value);
            return System.Convert.ChangeType(value, nonNullable);
        }
        catch
        {
            return value;
        }
    }

    private RadzenDataGridColumn<GiochiAcquistatiDto>? GetColumnByProperty(string property)
    {
        switch (property)
        {
            case nameof(GiochiAcquistatiDto.UtenteUsername): return colUtenteUsername;
            case nameof(GiochiAcquistatiDto.UtenteEmail): return colUtenteEmail;
            case nameof(GiochiAcquistatiDto.UtenteNomeCompleto): return colUtenteNomeCompleto;
            case nameof(GiochiAcquistatiDto.DataAcquisto): return colDataAcquisto;
            case nameof(GiochiAcquistatiDto.PrezzoPagato): return colPrezzoPagato;
            case nameof(GiochiAcquistatiDto.Quantita): return colQuantita;
            case nameof(GiochiAcquistatiDto.MetodoPagamento): return colMetodoPagamento;
            case nameof(GiochiAcquistatiDto.CodiceSconto): return colCodiceSconto;
            case nameof(GiochiAcquistatiDto.GiocoTitolo): return colGiocoTitolo;
            case nameof(GiochiAcquistatiDto.GiocoDescrizione): return colGiocoDescrizione;
            case nameof(GiochiAcquistatiDto.GiocoPrezzoListino): return colGiocoPrezzoListino;
            case nameof(GiochiAcquistatiDto.GiocoDataRilascio): return colGiocoDataRilascio;
            case nameof(GiochiAcquistatiDto.GiocoGenere): return colGiocoGenere;
            case nameof(GiochiAcquistatiDto.GiocoPiattaforma): return colGiocoPiattaforma;
            case nameof(GiochiAcquistatiDto.GiocoSviluppatore): return colGiocoSviluppatore;
            default: return null;
        }
    }

}
