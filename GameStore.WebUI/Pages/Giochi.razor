@page "/giochi"
@using GameStore.Application.DTOs
@using GameStore.Application.Services
@using GameStore.Domain.DTOs.Common
@using GameStore.Application.Common
@inject IGiocoService GiocoService
@inject NavigationManager Navigation
@inject DialogService DialogService
@inject NotificationService NotificationService

<PageTitle>Gestione Giochi - GameStore AI</PageTitle>

<div class="apple-card compact-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1>Gestione Giochi</h1>
            <p class="text-muted">Gestisci il catalogo dei giochi</p>
        </div>
        <div class="d-flex gap-2">
            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="filter_alt_off" Text="Pulisci Filtri" Click="ClearFilters" class="apple-btn-secondary" />
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add" Text="Aggiungi Gioco" Click="AggiungiGioco" class="apple-btn-primary" />
        </div>
    </div>
</div>

@if (errorMessage != null)
{
    <div class="apple-card mb-3">
        <RadzenAlert AlertStyle="AlertStyle.Danger" Text="@errorMessage" />
    </div>
}

<div class="apple-card">
    <RadzenDataGrid @ref="grid" 
                Data="@giochi" 
                TItem="GiocoDto"
                AllowPaging="true" 
                AllowSorting="true"
                AllowFiltering="true"
                AllowFilteringByColumn="true"
                FilterMode="FilterMode.SimpleWithMenu"
                PageSize="20"
                Count="@totalCount"
                PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true"
                PagingSummaryFormat="Pagina {0} di {1} ({2} elementi)"
                Loading="@isLoading"
                LoadData="@LoadData">
    
    <Columns>
        <RadzenDataGridColumn TItem="GiocoDto" Property="Titolo" Title="Titolo" Width="200px" Filterable="true">
            <Template Context="gioco">
                <RadzenLabel Text="@gioco.Titolo" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="GiocoDto" Property="Descrizione" Title="Descrizione" Width="300px" Filterable="true">
            <Template Context="gioco">
                <RadzenLabel Text="@(gioco.Descrizione?.Length > 50 ? gioco.Descrizione.Substring(0, 50) + "..." : gioco.Descrizione)" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="GiocoDto" Property="PrezzoListino" Title="Prezzo" Width="100px" Filterable="true">
            <Template Context="gioco">
                <RadzenLabel Text="@gioco.PrezzoListino.ToString("C")" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="GiocoDto" Property="DataRilascio" Title="Data Rilascio" Width="120px" Filterable="true">
            <Template Context="gioco">
                <RadzenLabel Text="@gioco.DataRilascio?.ToString("dd/MM/yyyy")" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="GiocoDto" Property="Genere" Title="Genere" Width="120px" Filterable="true">
            <Template Context="gioco">
                <RadzenLabel Text="@gioco.Genere" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="GiocoDto" Property="Piattaforma" Title="Piattaforma" Width="120px" Filterable="true">
            <Template Context="gioco">
                <RadzenLabel Text="@gioco.Piattaforma" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="GiocoDto" Property="Sviluppatore" Title="Sviluppatore" Width="150px" Filterable="true">
            <Template Context="gioco">
                <RadzenLabel Text="@gioco.Sviluppatore" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="GiocoDto" Filterable="false" Sortable="false" Width="120px">
            <Template Context="gioco">
                <RadzenButton ButtonStyle="ButtonStyle.Light" 
                             Icon="edit" 
                             Size="ButtonSize.Small" 
                             Click="@(() => ModificaGioco(gioco.Id))" 
                             class="me-1" />
                <RadzenButton ButtonStyle="ButtonStyle.Danger" 
                             Icon="delete" 
                             Size="ButtonSize.Small" 
                             Click="@(() => CancellaGioco(gioco.Id))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
</div>

@code {
    private RadzenDataGrid<GiocoDto>? grid;
    private List<GiocoDto> giochi = new List<GiocoDto>();
    private bool isLoading = false;
    private string? errorMessage;
    private int totalCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var request = new FilterRequest
            {
                PageNumber = 1,
                PageSize = 20,
                OrderBy = "DataCreazione desc"
            };

            var result = await GiocoService.GetPagedAsync(request);
            if (result.IsSuccess)
            {
                giochi = result.Value.Items.ToList();
                totalCount = result.Value.TotalItems;
                Console.WriteLine($"Loaded {giochi.Count()} games, total: {totalCount}");
            }
            else
            {
                errorMessage = result.Error.Message;
                giochi = new List<GiocoDto>();
                totalCount = 0;
                Console.WriteLine($"Error loading games: {result.Error.Message}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore durante il caricamento: {ex.Message}";
            giochi = new List<GiocoDto>();
            totalCount = 0;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadData(LoadDataArgs args)
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            // Gestisci l'ordinamento
            var orderBy = "DataCreazione desc";
            if (!string.IsNullOrEmpty(args.OrderBy))
            {
                orderBy = $"{args.OrderBy} {(args.Sorts?.FirstOrDefault()?.SortOrder == SortOrder.Descending ? "desc" : "asc")}";
            }

            // Gestisci i filtri
            var filterString = string.Empty;
            if (args.Filters != null && args.Filters.Any())
            {
                var filterParts = new List<string>();
                foreach (var filter in args.Filters)
                {
                    var filterExpression = BuildFilterExpression(filter.Property, filter.FilterOperator.ToString(), filter.FilterValue?.ToString() ?? string.Empty);
                    if (!string.IsNullOrEmpty(filterExpression))
                    {
                        filterParts.Add(filterExpression);
                    }
                }
                filterString = string.Join(" AND ", filterParts);
            }

            var request = new FilterRequest
            {
                PageNumber = ((args.Skip ?? 0) / (args.Top ?? 20)) + 1,
                PageSize = args.Top ?? 20,
                OrderBy = orderBy,
                Filter = filterString
            };

            var result = await GiocoService.GetPagedAsync(request);
            if (result.IsSuccess)
            {
                giochi = result.Value.Items.ToList();
                totalCount = result.Value.TotalItems;
            }
            else
            {
                errorMessage = result.Error.Message;
                giochi = new List<GiocoDto>();
                totalCount = 0;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore durante il caricamento: {ex.Message}";
            giochi = new List<GiocoDto>();
            totalCount = 0;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void AggiungiGioco()
    {
        Navigation.NavigateTo("/giochi/nuovo");
    }

    private async Task ClearFilters()
    {
        if (grid != null)
        {
            // Reset the grid and clear all filters
            grid.Reset(false, false);
            
            // Clear filters on each column
            grid.ColumnsCollection.ToList().ForEach(column =>
            {
                column.ClearFilters();
            });
            
            // Clear the data source to force reload
            giochi.Clear();
            
            // Reload the grid
            await grid.Reload();
            StateHasChanged();
        }
    }

    private void ModificaGioco(Guid id)
    {
        Navigation.NavigateTo($"/giochi/modifica/{id}");
    }

    private async Task CancellaGioco(Guid id)
    {
        try
        {
            // Mostra dialog di conferma con Radzen Dialog
            var result = await DialogService.Confirm(
                "Sei sicuro di voler cancellare questo gioco? Questa azione non può essere annullata.",
                "Conferma Cancellazione",
                new ConfirmOptions() 
                { 
                    OkButtonText = "Sì, cancella", 
                    CancelButtonText = "Annulla",
                    Style = "min-width: 400px"
                }
            );

            if (result == true)
            {
                var deleteResult = await GiocoService.DeleteAsync(id);

                if (deleteResult.IsSuccess)
                {
                    // Mostra notifica di successo
                    NotificationService.Notify(new NotificationMessage 
                    { 
                        Severity = NotificationSeverity.Success, 
                        Summary = "Gioco Cancellato",
                        Detail = "Il gioco è stato cancellato con successo.",
                        Duration = 4000,
                        ShowProgress = true
                    });
                    
                    // Ricarica la griglia
                    await LoadInitialData();
                }
                else
                {
                    // Mostra notifica di errore
                    NotificationService.Notify(new NotificationMessage 
                    { 
                        Severity = NotificationSeverity.Error, 
                        Summary = "Errore",
                        Detail = deleteResult.Error.Message,
                        Duration = 6000,
                        ShowProgress = true
                    });
                }
            }
        }
        catch (Exception ex)
        {
            // Mostra notifica di errore
            NotificationService.Notify(new NotificationMessage 
            { 
                Severity = NotificationSeverity.Error, 
                Summary = "Errore",
                Detail = $"Errore durante la cancellazione: {ex.Message}",
                Duration = 6000,
                ShowProgress = true
            });
        }
    }

    /// <summary>
    /// Costruisce un'espressione di filtro basata sull'operatore
    /// </summary>
    private string BuildFilterExpression(string property, string filterOperator, string filterValue)
    {
        if (string.IsNullOrEmpty(filterValue))
            return string.Empty;

        return filterOperator switch
        {
            "Contains" => $"{property}.Contains(\"{filterValue}\")",
            "StartsWith" => $"{property}.StartsWith(\"{filterValue}\")",
            "EndsWith" => $"{property}.EndsWith(\"{filterValue}\")",
            "Equals" => $"{property} == \"{filterValue}\"",
            "NotEquals" => $"{property} != \"{filterValue}\"",
            "GreaterThan" => $"{property} > {filterValue}",
            "GreaterThanOrEqual" => $"{property} >= {filterValue}",
            "LessThan" => $"{property} < {filterValue}",
            "LessThanOrEqual" => $"{property} <= {filterValue}",
            _ => $"{property}.Contains(\"{filterValue}\")" // Default to Contains
        };
    }
}