@page "/giochi"
@using GameStore.Application.DTOs
@using GameStore.Application.Services
@using GameStore.Domain.DTOs.Common
@using GameStore.Application.Common
@inject IGiocoService GiocoService
@inject NavigationManager Navigation

<PageTitle>Gestione Giochi</PageTitle>

<div class="row mb-3">
    <div class="col">
        <h3>Gestione Giochi</h3>
    </div>
    <div class="col-auto">
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add" Text="Aggiungi Gioco" Click="AggiungiGioco" />
    </div>
</div>

@if (errorMessage != null)
{
    <RadzenAlert AlertStyle="AlertStyle.Danger" Text="@errorMessage" />
}

<RadzenDataGrid @ref="grid" 
                Data="@giochi" 
                TItem="GiocoDto"
                AllowPaging="true" 
                AllowSorting="true"
                AllowFiltering="true"
                FilterMode="FilterMode.Advanced"
                PageSize="20"
                Count="@totalCount"
                PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true"
                PagingSummaryFormat="Pagina {0} di {1} ({2} elementi)"
                Loading="@isLoading"
                LoadData="@LoadData"
                RowClick="@OnRowClick">
    
    <Columns>
        <RadzenDataGridColumn TItem="GiocoDto" Property="Titolo" Title="Titolo" Width="200px">
            <Template Context="gioco">
                <RadzenLabel Text="@gioco.Titolo" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="GiocoDto" Property="Descrizione" Title="Descrizione" Width="300px">
            <Template Context="gioco">
                <RadzenLabel Text="@(gioco.Descrizione?.Length > 50 ? gioco.Descrizione.Substring(0, 50) + "..." : gioco.Descrizione)" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="GiocoDto" Property="PrezzoListino" Title="Prezzo" Width="100px">
            <Template Context="gioco">
                <RadzenLabel Text="@gioco.PrezzoListino.ToString("C")" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="GiocoDto" Property="DataRilascio" Title="Data Rilascio" Width="120px">
            <Template Context="gioco">
                <RadzenLabel Text="@gioco.DataRilascio?.ToString("dd/MM/yyyy")" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="GiocoDto" Property="Genere" Title="Genere" Width="120px">
            <Template Context="gioco">
                <RadzenLabel Text="@gioco.Genere" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="GiocoDto" Property="Piattaforma" Title="Piattaforma" Width="120px">
            <Template Context="gioco">
                <RadzenLabel Text="@gioco.Piattaforma" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="GiocoDto" Property="Sviluppatore" Title="Sviluppatore" Width="150px">
            <Template Context="gioco">
                <RadzenLabel Text="@gioco.Sviluppatore" />
            </Template>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="GiocoDto" Filterable="false" Sortable="false" Width="120px">
            <Template Context="gioco">
                <RadzenButton ButtonStyle="ButtonStyle.Light" 
                             Icon="edit" 
                             Size="ButtonSize.Small" 
                             Click="@(() => ModificaGioco(gioco.Id))" 
                             class="me-1" />
                <RadzenButton ButtonStyle="ButtonStyle.Danger" 
                             Icon="delete" 
                             Size="ButtonSize.Small" 
                             Click="@(() => CancellaGioco(gioco.Id))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private RadzenDataGrid<GiocoDto>? grid;
    private IEnumerable<GiocoDto> giochi = new List<GiocoDto>();
    private bool isLoading = false;
    private string? errorMessage;
    private int totalCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var request = new FilterRequest
            {
                PageNumber = 1,
                PageSize = 20,
                OrderBy = "DataCreazione desc"
            };

            var result = await GiocoService.GetPagedAsync(request);
            if (result.IsSuccess)
            {
                giochi = result.Value.Items;
                totalCount = result.Value.TotalItems;
                Console.WriteLine($"Loaded {giochi.Count()} games, total: {totalCount}");
            }
            else
            {
                errorMessage = result.Error.Message;
                giochi = new List<GiocoDto>();
                totalCount = 0;
                Console.WriteLine($"Error loading games: {result.Error.Message}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore durante il caricamento: {ex.Message}";
            giochi = new List<GiocoDto>();
            totalCount = 0;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadData(LoadDataArgs args)
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var request = new FilterRequest
            {
                PageNumber = ((args.Skip ?? 0) / (args.Top ?? 20)) + 1,
                PageSize = args.Top ?? 20,
                OrderBy = "DataCreazione desc"
            };

            var result = await GiocoService.GetPagedAsync(request);
            if (result.IsSuccess)
            {
                giochi = result.Value.Items;
                totalCount = result.Value.TotalItems;
            }
            else
            {
                errorMessage = result.Error.Message;
                giochi = new List<GiocoDto>();
                totalCount = 0;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore durante il caricamento: {ex.Message}";
            giochi = new List<GiocoDto>();
            totalCount = 0;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void AggiungiGioco()
    {
        Navigation.NavigateTo("/giochi/nuovo");
    }

    private void ModificaGioco(Guid id)
    {
        Navigation.NavigateTo($"/giochi/modifica/{id}");
    }

    private async Task CancellaGioco(Guid id)
    {
        if (await ConfirmDelete())
        {
            try
            {
                var result = await GiocoService.DeleteAsync(id);
                if (result.IsSuccess)
                {
                    await grid?.Reload();
                }
                else
                {
                    errorMessage = result.Error.Message;
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Errore durante la cancellazione: {ex.Message}";
            }
        }
    }

    private async Task<bool> ConfirmDelete()
    {
        // Implementazione semplificata - in un'app reale usare un modal
        return await Task.FromResult(true);
    }

    private void OnRowClick(DataGridRowMouseEventArgs<GiocoDto> args)
    {
        ModificaGioco(args.Data.Id);
    }
}