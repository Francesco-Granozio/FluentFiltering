@page "/acquisti"
@using GameStore.Application.DTOs
@using GameStore.Application.Services
@using GameStore.Domain.DTOs.Common
@using GameStore.Application.Common
@inject IAcquistoService AcquistoService
@inject IUtenteService UtenteService
@inject IGiocoService GiocoService
@inject NavigationManager Navigation
@inject DialogService DialogService
@inject NotificationService NotificationService

<PageTitle>Gestione Acquisti - GameStore AI</PageTitle>

<div class="row mb-3">
    <div class="col">
        <h3>Gestione Acquisti</h3>
    </div>
    <div class="col-auto">
        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="filter_alt_off" Text="Pulisci Filtri" Click="ClearFilters" class="me-2" />
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add" Text="Nuovo acquisto" Click="AggiungiAcquisto" />
    </div>
</div>

@if (isLoadingData)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Caricamento...</span>
        </div>
    </div>
}
else
{
    @if (errorMessage != null)
    {
        <RadzenAlert AlertStyle="AlertStyle.Danger" Text="@errorMessage" />
    }


    <RadzenDataGrid @ref="grid"
                    Data="@acquisti"
                    TItem="AcquistoDto"
                    AllowPaging="true"
                    AllowSorting="true"
                    AllowFiltering="true"
                    AllowFilteringByColumn="true"
                    FilterMode="FilterMode.SimpleWithMenu"
                    PageSize="20"
                    Count="@totalCount"
                    PagerHorizontalAlign="HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    PagingSummaryFormat="Pagina {0} di {1} ({2} elementi)"
                    Loading="@isLoading"
                    LoadData="@LoadData">

        <Columns>
            <RadzenDataGridColumn TItem="AcquistoDto" Property="UtenteUsername" Title="Utente" Width="150px" Filterable="true">
                <Template Context="acquisto">
                    <RadzenLabel Text="@acquisto.UtenteUsername" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="AcquistoDto" Property="GiocoTitolo" Title="Gioco" Width="200px" Filterable="true">
                <Template Context="acquisto">
                    <RadzenLabel Text="@acquisto.GiocoTitolo" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="AcquistoDto" Property="DataAcquisto" Title="Data Acquisto" Width="120px" Filterable="true">
                <Template Context="acquisto">
                    <RadzenLabel Text="@acquisto.DataAcquisto.ToString("dd/MM/yyyy")" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="AcquistoDto" Property="PrezzoPagato" Title="Prezzo Pagato" Width="120px" Filterable="true">
                <Template Context="acquisto">
                    <RadzenLabel Text="@acquisto.PrezzoPagato.ToString("C")" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="AcquistoDto" Property="Quantita" Title="Quantità" Width="100px" Filterable="true">
                <Template Context="acquisto">
                    <RadzenLabel Text="@acquisto.Quantita.ToString()" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="AcquistoDto" Property="MetodoPagamento" Title="Metodo Pagamento" Width="150px" Filterable="true">
                <Template Context="acquisto">
                    <RadzenLabel Text="@acquisto.MetodoPagamento" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="AcquistoDto" Property="CodiceSconto" Title="Codice Sconto" Width="120px" Filterable="true">
                <Template Context="acquisto">
                    <RadzenLabel Text="@acquisto.CodiceSconto" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="AcquistoDto" Filterable="false" Sortable="false" Width="120px">
                <Template Context="acquisto">
                    <RadzenButton ButtonStyle="ButtonStyle.Light"
                                  Icon="edit"
                                  Size="ButtonSize.Small"
                                  Click="@(() => ModificaAcquisto(acquisto.Id))"
                                  class="me-1" />
                    <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                  Icon="delete"
                                  Size="ButtonSize.Small"
                                  Click="@(() => CancellaAcquisto(acquisto.Id))" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    private RadzenDataGrid<AcquistoDto>? grid;
    private List<AcquistoDto> acquisti = new List<AcquistoDto>();
    private bool isLoading = false;
    private bool isLoadingData = true;
    private string? errorMessage;
    private int totalCount = 0;
    private Guid? selectedUtenteId;
    private Guid? selectedGiocoId;

    protected override async Task OnInitializedAsync()
    {
        await CaricaDati();
    }

    private async Task CaricaDati()
    {
        try
        {
            isLoadingData = true;
            errorMessage = null;

            // Carica acquisti iniziali
            await LoadInitialData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore durante il caricamento dei dati: {ex.Message}";
        }
        finally
        {
            isLoadingData = false;
        }
    }

    private async Task LoadInitialData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var request = new FilterRequest
            {
                PageNumber = 1,
                PageSize = 20,
                OrderBy = "DataAcquisto desc"
            };

            var result = await AcquistoService.GetPagedAsync(request);
            if (result.IsSuccess)
            {
                acquisti = result.Value.Items.ToList();
                totalCount = result.Value.TotalItems;
                Console.WriteLine($"Loaded {acquisti.Count()} purchases, total: {totalCount}");
            }
            else
            {
                errorMessage = result.Error.Message;
                acquisti = new List<AcquistoDto>();
                totalCount = 0;
                Console.WriteLine($"Error loading purchases: {result.Error.Message}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore durante il caricamento: {ex.Message}";
            acquisti = new List<AcquistoDto>();
            totalCount = 0;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadData(LoadDataArgs args)
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            // Gestisce l'ordinamento
            string orderBy = "DataAcquisto desc"; // default
            if (!string.IsNullOrEmpty(args.OrderBy))
            {
                orderBy = args.OrderBy;
            }

            // Gestisce i filtri
            var filterParts = new List<string>();
            if (args.Filters != null)
            {
                foreach (var filter in args.Filters)
                {
                    if (filter.FilterValue != null && !string.IsNullOrEmpty(filter.FilterValue.ToString()))
                    {
                        var filterValue = filter.FilterValue.ToString();
                        var filterExpression = BuildFilterExpression(filter.Property, filter.FilterOperator.ToString(), filterValue);
                        filterParts.Add(filterExpression);
                    }
                }
            }

            // Aggiunge filtri personalizzati
            if (selectedUtenteId.HasValue)
            {
                filterParts.Add($"UtenteId == \"{selectedUtenteId.Value}\"");
            }
            if (selectedGiocoId.HasValue)
            {
                filterParts.Add($"GiocoId == \"{selectedGiocoId.Value}\"");
            }

            var request = new FilterRequest
            {
                PageNumber = ((args.Skip ?? 0) / (args.Top ?? 20)) + 1,
                PageSize = args.Top ?? 20,
                OrderBy = orderBy,
                Filter = filterParts.Any() ? string.Join(" AND ", filterParts) : null
            };

            Console.WriteLine($"Loading data: Page={request.PageNumber}, Size={request.PageSize}, OrderBy={request.OrderBy}, Filter={request.Filter}");

            var result = await AcquistoService.GetPagedAsync(request);
            if (result.IsSuccess)
            {
                acquisti = result.Value.Items.ToList();
                totalCount = result.Value.TotalItems;
            }
            else
            {
                errorMessage = result.Error.Message;
                acquisti = new List<AcquistoDto>();
                totalCount = 0;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore durante il caricamento: {ex.Message}";
            acquisti = new List<AcquistoDto>();
            totalCount = 0;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void AggiungiAcquisto()
    {
        Navigation.NavigateTo("/acquisti/nuovo");
    }

    private async Task OnUtenteFilterChanged()
    {
        // Il valore è già aggiornato tramite @bind
        if (grid != null)
        {
            await grid.Reload();
        }
    }

    private async Task OnGiocoFilterChanged()
    {
        // Il valore è già aggiornato tramite @bind
        if (grid != null)
        {
            await grid.Reload();
        }
    }

    private async Task ClearFilters()
    {
        // Reset dropdown filters
        selectedUtenteId = null;
        selectedGiocoId = null;

        if (grid != null)
        {
            // Reset the grid and clear all filters
            grid.Reset(false, false);

            // Clear filters on each column
            grid.ColumnsCollection.ToList().ForEach(column =>
            {
                column.ClearFilters();
            });

            // Clear the data source to force reload
            acquisti.Clear();

            // Reload the grid
            await grid.Reload();
        }

        // Force UI update to reset dropdowns and grid
        StateHasChanged();
    }

    /// <summary>
    /// Costruisce un'espressione di filtro basata sull'operatore
    /// </summary>
    private string BuildFilterExpression(string property, string filterOperator, string filterValue)
    {
        if (string.IsNullOrEmpty(filterValue))
            return string.Empty;

        return filterOperator switch
        {
            "Contains" => $"{property}.Contains(\"{filterValue}\")",
            "StartsWith" => $"{property}.StartsWith(\"{filterValue}\")",
            "EndsWith" => $"{property}.EndsWith(\"{filterValue}\")",
            "Equals" => $"{property} == \"{filterValue}\"",
            "NotEquals" => $"{property} != \"{filterValue}\"",
            "GreaterThan" => $"{property} > {filterValue}",
            "GreaterThanOrEqual" => $"{property} >= {filterValue}",
            "LessThan" => $"{property} < {filterValue}",
            "LessThanOrEqual" => $"{property} <= {filterValue}",
            _ => $"{property}.Contains(\"{filterValue}\")" // Default to Contains
        };
    }

    private void ModificaAcquisto(Guid id)
    {
        Navigation.NavigateTo($"/acquisti/modifica/{id}");
    }

    private async Task CancellaAcquisto(Guid id)
    {
        try
        {
            // Mostra dialog di conferma con Radzen Dialog
            var result = await DialogService.Confirm(
                "Sei sicuro di voler cancellare questo acquisto? Questa azione non può essere annullata.",
                "Conferma Cancellazione",
                new ConfirmOptions()
                {
                    OkButtonText = "Sì, cancella",
                    CancelButtonText = "Annulla",
                    Style = "min-width: 400px"
                }
            );

            if (result == true)
            {
                var deleteResult = await AcquistoService.DeleteAsync(id);

                if (deleteResult.IsSuccess)
                {
                    // Mostra notifica di successo
                    NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Acquisto Cancellato",
                        Detail = "L'acquisto è stato cancellato con successo.",
                        Duration = 4000,
                        ShowProgress = true
                    });

                    // Ricarica la griglia
                    await LoadInitialData();
                }
                else
                {
                    // Mostra notifica di errore
                    NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Errore",
                        Detail = deleteResult.Error.Message,
                        Duration = 6000,
                        ShowProgress = true
                    });
                }
            }
        }
        catch (Exception ex)
        {
            // Mostra notifica di errore
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Errore",
                Detail = $"Errore durante la cancellazione: {ex.Message}",
                Duration = 6000,
                ShowProgress = true
            });
        }
    }

}